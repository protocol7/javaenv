#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from __future__ import print_function
import argparse
import hashlib
import os
import os.path
import shutil
import sys
import tarfile
import tempfile
import urllib.request

DEBUG = os.environ.get("JAVAENV_DEBUG") == "true"
JAVAENV_HOME = os.environ.get("JAVAENV_HOME",
                              os.path.expanduser("~/.javaenv/"))
VERSIONS_DIR = JAVAENV_HOME + "versions/"

VERSIONS = {
    "adoptopenjdk-8u222": {
        "url": "https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u222-b10/OpenJDK8U-jdk_x64_mac_hotspot_8u222b10.tar.gz",
        "home_dir": "jdk8u222-b10/Contents/Home/",
        "sha256": "9605fd00d2960934422437f601c7a9a1c5537309b9199d5bc75f84f20cd29a76"
    },
    "corretto-11.0.4.11.1": {
        "url": "https://d3pxv6yz143wms.cloudfront.net/11.0.4.11.1/amazon-corretto-11.0.4.11.1-macosx-x64.tar.gz",
        "home_dir": "amazon-corretto-11.jdk/Contents/Home/",
        "md5": "44bb1e1e6368e1b0f994f5e899b0adc9"
    },
    "openjdk-9.0.4": {
        "url": "https://download.java.net/java/GA/jdk9/9.0.4/binaries/openjdk-9.0.4_osx-x64_bin.tar.gz",
        "home_dir": "jdk-9.0.4.jdk/Contents/Home/",
        "sha256": "66415406716fc42cff36e2d74ae991d46c42b3cf317b0425c7bf67697c616716"
    },
    "openjdk-11.0.1": {
        "url": "https://download.java.net/java/GA/jdk11/13/GPL/openjdk-11.0.1_osx-x64_bin.tar.gz",
        "home_dir": "jdk-11.0.1.jdk/Contents/Home/",
        "sha256": "fa07eee08fa0f3de541ee1770de0cdca2ae3876f3bd78c329f27e85c287cd070"
    },
    "openjdk-11.0.2": {
        "url": "https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_osx-x64_bin.tar.gz",
        "home_dir": "jdk-11.0.2.jdk/Contents/Home/",
        "sha256": "f365750d4be6111be8a62feda24e265d97536712bc51783162982b8ad96a70ee"
    },
    "openjdk-12": {
        "url": "https://download.java.net/java/GA/jdk12/33/GPL/openjdk-12_osx-x64_bin.tar.gz",
        "home_dir": "jdk-12.jdk/Contents/Home/",
        "sha256": "52164a04db4d3fdfe128cfc7b868bc4dae52d969f03d53ae9d4239fe783e1a3a"
    },
    "oracle-12.0.1": {
        "url": "https://download.oracle.com/java/GA/jdk12.0.1/69cfe15208a647278a19ef0990eea691/12/GPL/openjdk-12.0.1_osx-x64_bin.tar.gz",
        "home_dir": "jdk-12.0.1.jdk/Contents/Home/",
        "sha256": "cba6f42f82496f62c51fb544e243d440984d442bdc906550a30428d8be6189e5"
    },
} # yapf: disable


def eprint(msg):
    print(msg, file=sys.stderr)


def debug(msg):
    if DEBUG:
        eprint(msg)


def make_versions_dir():
    if not os.path.exists(VERSIONS_DIR):
        os.makedirs(VERSIONS_DIR)
        debug("Created versions dir: " + VERSIONS_DIR)
    return VERSIONS_DIR


def get_version_dir(version):
    return VERSIONS_DIR + version + "/"


def make_version_dir(version):
    version_dir = get_version_dir(version)
    if not os.path.exists(version_dir):
        os.makedirs(version_dir)
    return version_dir


def get_installed_versions():
    debug("getting installed versions")
    versions = os.listdir(make_versions_dir())
    debug(versions)
    return versions


def get_download_url(version):
    debug("getting download url for " + version)
    return VERSIONS[version]["url"]


def is_version_installed(version):
    version_dir = get_version_dir(version)
    return os.path.exists(version_dir)


def get_java_home(version):
    if is_version_installed(version):
        return make_version_dir(version) + VERSIONS[version]["home_dir"]
    else:
        raise Exception("No installed versions of Java matched " + version)


def verify_hash(version, path):
    if "sha256" in VERSIONS[version]:
        hash = hashlib.sha256()
        expected_hash = VERSIONS[version]["sha256"]
    else:
        hash = hashlib.md5()
        expected_hash = VERSIONS[version]["md5"]

    with open(path, 'rb') as f:
        while True:
            data = f.read(65536)
            if not data:
                break
            hash.update(data)
    if "{0}".format(hash.hexdigest()) != expected_hash:
        raise Exception("Unexpected hash for downloaded file, aborting")


def download(version):
    url = get_download_url(version)
    debug("downloading %s" % url)
    tmp_file = tempfile.mktemp()
    urllib.request.urlretrieve(url, tmp_file,
                               lambda b, bs, t: print_progress(b * bs, t))
    print()  # print newline after progress bar
    debug("downloaded")

    debug("verifying hash")
    verify_hash(version, tmp_file)

    version_dir = make_version_dir(version)

    tar = tarfile.open(tmp_file)
    tar.extractall(path=version_dir)
    tar.close()
    debug("extracted")
    debug(version + " available at " + get_java_home(version))


def install(version):
    debug("install " + version)
    installed_versions = get_installed_versions()
    if version in installed_versions:
        debug("Already installed")
    else:
        download(version)


def uninstall(version):
    version_dir = get_version_dir(version)
    if os.path.exists(version_dir):
        debug("Removing %s" % version_dir)
        shutil.rmtree(version_dir)
        debug("Removed %s" % version_dir)
    else:
        eprint("Version not installed")


def list_installed():
    for version in sorted(get_installed_versions()):
        print(version)


def list_remote():
    for version in VERSIONS:
        print(version)


def get_version(argv_version):
    java_version_file = ".javaversion"
    if argv_version:
        debug("Getting version from command line")
        version = argv_version
    elif os.path.exists(java_version_file):
        debug("Getting version from " + java_version_file)
        with open(java_version_file, 'r') as f:
            version = f.read().strip()
            debug("Read " + version + " from " + java_version_file)
    else:
        raise Exception("Undefined version")

    if version[0].isdigit():
        return "openjdk-" + version
    else:
        return version


def print_progress(iteration,
                   total,
                   prefix='',
                   suffix='',
                   decimals=1,
                   bar_length=50):
    str_format = "{0:." + str(decimals) + "f}"
    percents = str_format.format(100 * (iteration / float(total)))
    filled_length = int(round(bar_length * iteration / float(total)))
    bar = 'â–ˆ' * filled_length + '-' * (bar_length - filled_length)

    sys.stdout.write('\r%s |%s| %s%s %s' %
                     (prefix, bar, percents, '%', suffix)),

    sys.stdout.flush()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Java version manager')
    subparsers = parser.add_subparsers(dest='cmd')

    install_parser = subparsers.add_parser('install',
                                           help='Install a Java version')
    install_parser.add_argument(
        'version',
        nargs='?',
        default=None,
        help='version to install, default to using .javaversion')

    home_parser = subparsers.add_parser('home', help='Print active JAVA_HOME')
    home_parser.add_argument(
        'version',
        nargs='?',
        default=None,
        help='version to use, default to using .javaversion')

    subparsers.add_parser('list', help='List installed versions')

    uninstall_parser = subparsers.add_parser('uninstall',
                                             help='Uninstall a version')
    uninstall_parser.add_argument('version', help='version to uninstall')

    subparsers.add_parser('list-remote', help='List all installable versions')

    args = parser.parse_args()
    cmd = args.cmd
    if cmd == "install":
        install(get_version(args.version))
    elif cmd == "home":
        print(get_java_home(get_version(args.version)))
    elif cmd == "uninstall":
        uninstall(args.version)
    elif cmd == "list":
        list_installed()
    elif cmd == "list-remote":
        list_remote()
